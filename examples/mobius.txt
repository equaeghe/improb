Mobius Transform and Natural Extension
--------------------------------------

This example shows that, in general, the Mobius transform of a
coherent lower probability cannot be used to calculate its natural
extension.

>>> import itertools
>>> import random
>>> from improb.lowprev.lowprob import LowProb
>>> from improb.lowprev.belfunc import BelFunc
>>> random.seed(10)
>>> n = 4
>>> events = [list(event) for event in itertools.product([0, 1], repeat=n)]
>>> gambles = [[random.randint(0,2) for i in range(n)] for j in range(20)]
>>> for i in range(20):
...     # construct belief function from lower probability
...     lpr = LowProb.make_random(pspace=n, division=2, number_type='fraction')
...     lpr.extend()
...     bel = BelFunc(lpr)
...     # check for incoherence
...     for gamble in gambles:
...         if lpr.number_cmp(lpr.get_lower(gamble), bel.get_lower(gamble)) != 0:
...             print('lpr (lower probability):')
...             print(lpr)
...             print('bel.mobius (basic belief assignment):')
...             print(bel.mobius)
...             print("lpr.get_lower({0})={1}".format(gamble, lpr.get_lower(gamble)))
...             print("bel.get_lower({0})={1}".format(gamble, bel.get_lower(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found")
lpr (lower probability):
        : 0
0       : 0
  1     : 0
    2   : 0
      3 : 0
0 1     : 0
0   2   : 1/2
0     3 : 1/2
  1 2   : 1/2
  1   3 : 1/2
    2 3 : 0
0 1 2   : 1/2
0 1   3 : 1/2
0   2 3 : 1/2
  1 2 3 : 1/2
0 1 2 3 : 1
bel.mobius (basic belief assignment):
        : 0
0       : 0
  1     : 0
    2   : 0
      3 : 0
0 1     : 0
0   2   : 1/2
0     3 : 1/2
  1 2   : 1/2
  1   3 : 1/2
    2 3 : 0
0 1 2   : -1/2
0 1   3 : -1/2
0   2 3 : -1/2
  1 2 3 : -1/2
0 1 2 3 : 1
lpr.get_lower([2, 0, 1, 1])=1
bel.get_lower([2, 0, 1, 1])=1/2

Quick check::

  lpr.get_lower([2,0,1,1]) >= lpr([1,0,1,0])+lpr([1,0,0,1])=1
  bel.get_lower([2,0,1,1]) = 0.5*(1+1+0+0+0+0-1+0+0)=0.5

However, the Mobius transform of a 2-monotone lower probability *can*
be used to calculate its natural extension. The following simulation
confirms this for a space of size 3 (all coherent lower probabilities
on such space are 2-monotone).

>>> import itertools
>>> import random
>>> from improb.lowprev.lowprob import LowProb
>>> from improb.lowprev.belfunc import BelFunc
>>> random.seed(10)
>>> n = 3
>>> gambles = [[random.randint(0,5) for i in range(n)] for j in range(20)]
>>> for i in range(20): # increase at will...
...     # construct a coherent lower probability
...     lpr = LowProb.make_random(pspace=n, division=2, number_type='fraction')
...     lpr.extend()
...     set_function = lpr.set_function
...     mobius = lpr.mobius
...     # check for incoherence
...     for gamble in gambles:
...         if lpr.number_cmp(lpr.get_lower(gamble), mobius.get_bba_choquet(gamble)) != 0 or lpr.number_cmp(lpr.get_lower(gamble), set_function.get_choquet(gamble)) != 0:
...             print('lpr (lower probability):')
...             print(lpr)
...             print('mobius (basic belief assignment):')
...             print(mobius)
...             print("lpr.get_lower({0})={1}".format(gamble, lpr.get_lower(gamble)))
...             print("mobius.get_bba_choquet({0})={1}".format(gamble, mobius.get_bba_choquet(gamble)))
...             print("set_function.get_choquet({0})={1}".format(gamble, set_function.get_choquet(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found") # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
RuntimeError: no counterexample found

Finally, note that the Mobius transform can also be used to calculate
the Choquet integral with respect to an arbitrary set function
:math:`s` for which :math:`s(\emptyset)=0`:

>>> import itertools
>>> import random
>>> from improb import PSpace
>>> from improb.setfunction import SetFunction
>>> random.seed(10)
>>> n = 5
>>> gambles = [[random.randint(-5,5) for i in range(n)] for j in range(20)]
>>> for i in range(20): # increase at will...
...     # construct a random set function
...     pspace = PSpace(n)
...     s = SetFunction(
...         pspace=pspace,
...         data=dict((event, random.randint(-len(pspace), len(pspace)))
...                   for event in pspace.subsets()),
...         number_type='fraction')
...     s[False] = 0
...     m = SetFunction(
...         pspace=pspace,
...         data=dict((event, s.get_mobius(event))
...                   for event in pspace.subsets()),
...         number_type='fraction')
...     # check equality of two types of integrals
...     for gamble in gambles:
...         if s.number_cmp(s.get_choquet(gamble), m.get_bba_choquet(gamble)) != 0:
...             print('s:')
...             print(s)
...             print('m (basic belief assignment):')
...             print(m)
...             print("s.get_choquet({0})={1}".format(gamble, s.get_choquet(gamble)))
...             print("m.get_bba_choquet({0})={1}".format(gamble, m.get_bba_choquet(gamble)))
...             break
...     else:
...         # no inequality! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found") # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
RuntimeError: no counterexample found
