Solving some questions posed by Erik Quaeghebeur
================================================

This example proves that, in general, the Mobius inverse of a coherent
lower probability cannot be used to calculate its natural extension.

>>> import itertools
>>> import random
>>> from improb.lowprev import LowPrev, BeliefFunction, random_lowprob
>>> random.seed(10)
>>> n = 4
>>> events = [list(event) for event in itertools.product([0, 1], repeat=n)]
>>> gambles = [[random.randint(0,2) for i in range(n)] for j in range(20)]
>>> for i in range(100):
...     # construct a coherent lower probability
...     lpr = random_lowprob(pspace=n, division=10)
...     # construct belief function from mobius inverse
...     bel = BeliefFunction(mass=lpr.get_mobius_inverse(), pspace=n)
...     # check for incoherence
...     for gamble in gambles:
...         if abs(lpr.get_lower(gamble) - bel.get_lower(gamble)) > 1e-6:
...             for event in events:
...                 print("P_({0})={1:g}".format(event, lpr.get_lower(event)))
...             for event in events:
...                 set_ = frozenset(i for i in range(n) if event[i])
...                 print("m({0})={1:g}".format(event, bel._mass[set_] if abs(bel._mass[set_]) > 1e-10 else 0))
...             print("E_P({0})={1:g}".format(gamble, lpr.get_lower(gamble)))
...             print("E_m({0})={1:g}".format(gamble, bel.get_lower(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found")
P_([0, 0, 0, 0])=-0
P_([0, 0, 0, 1])=0.1
P_([0, 0, 1, 0])=0.1
P_([0, 0, 1, 1])=0.5
P_([0, 1, 0, 0])=0.2
P_([0, 1, 0, 1])=0.3
P_([0, 1, 1, 0])=0.3
P_([0, 1, 1, 1])=0.7
P_([1, 0, 0, 0])=0.1
P_([1, 0, 0, 1])=0.3
P_([1, 0, 1, 0])=0.2
P_([1, 0, 1, 1])=0.6
P_([1, 1, 0, 0])=0.3
P_([1, 1, 0, 1])=0.5
P_([1, 1, 1, 0])=0.4
P_([1, 1, 1, 1])=1
m([0, 0, 0, 0])=0
m([0, 0, 0, 1])=0.1
m([0, 0, 1, 0])=0.1
m([0, 0, 1, 1])=0.3
m([0, 1, 0, 0])=0.2
m([0, 1, 0, 1])=0
m([0, 1, 1, 0])=0
m([0, 1, 1, 1])=0
m([1, 0, 0, 0])=0.1
m([1, 0, 0, 1])=0.1
m([1, 0, 1, 0])=0
m([1, 0, 1, 1])=-0.1
m([1, 1, 0, 0])=0
m([1, 1, 0, 1])=0
m([1, 1, 1, 0])=0
m([1, 1, 1, 1])=0.2
E_P([1, 0, 1, 2])=0.8
E_m([1, 0, 1, 2])=0.7

However, it seems that the Mobius inverse of a 2-monotone lower
probability *can* be used to calculate its natural extension. The
following simulation seems to confirm this for a space of size 3 (all
coherent lower probabilities on such space are 2-monotone).

>>> from random import random
>>> import itertools
>>> import random
>>> from improb.lowprev import LowPrev, BeliefFunction
>>> random.seed(10)
>>> n = 3
>>> events = [list(event) for event in itertools.product([0, 1], repeat=n)]
>>> gambles = [[random.randint(0,5) for i in range(n)] for j in range(20)]
>>> for i in range(1000): # increase n if one wishes...
...     # construct a coherent lower probability
...     lpr = random_lowprob(pspace=n, division=10)
...     # construct belief function from mobius inverse
...     bel = BeliefFunction(mass=lpr.get_mobius_inverse(), pspace=n)
...     # check for incoherence
...     for gamble in gambles:
...         if abs(lpr.get_lower(gamble) - bel.get_lower(gamble)) > 1e-6:
...             for event in events:
...                 print("P_({0})={1:g}".format(event, lpr.get_lower(event)))
...             for event in events:
...                 set_ = frozenset(i for i in range(n) if event[i])
...                 print("m({0})={1:g}".format(event, bel._mass[set_] if abs(bel._mass[set_]) > 1e-10 else 0))
...             print("E_P({0})={1:g}".format(gamble, lpr.get_lower(gamble)))
...             print("E_m({0})={1:g}".format(gamble, bel.get_lower(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found") # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
RuntimeError: no counterexample found
