Mobius Inverse and Natural Extension
------------------------------------

This example shows that, in general, the Mobius inverse of a coherent
lower probability cannot be used to calculate its natural extension.

>>> import itertools
>>> import random
>>> from improb.lowprev.lowprob import LowProb
>>> from improb.lowprev.belfunc import BelFunc
>>> random.seed(10)
>>> n = 4
>>> events = [list(event) for event in itertools.product([0, 1], repeat=n)]
>>> gambles = [[random.randint(0,2) for i in range(n)] for j in range(20)]
>>> for i in range(20):
...     # construct a coherent lower probability
...     lpr = LowProb.make_random(pspace=n, division=2, number_type='fraction')
...     # construct belief function from lower probability
...     bel = BelFunc(lpr.pspace, mapping=lpr, number_type=lpr.number_type)
...     # check for incoherence
...     for gamble in gambles:
...         if lpr.number_cmp(lpr.get_lower(gamble), bel.get_lower(gamble)) != 0:
...             print('lpr (lower probability):')
...             print(lpr)
...             print('bel.mobius_inverse (basic belief assignment):')
...             print(bel.mobius_inverse)
...             print("lpr.get_lower({0})={1}".format(gamble, lpr.get_lower(gamble)))
...             print("bel.get_lower({0})={1}".format(gamble, bel.get_lower(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found")
lpr (lower probability):
0   2   : 1/2
0     3 : 1/2
  1 2   : 1/2
  1   3 : 1/2
0 1 2   : 1/2
0 1   3 : 1/2
0   2 3 : 1/2
  1 2 3 : 1/2
0 1 2 3 : 1
bel.mobius_inverse (basic belief assignment):
0   2   : 1/2
0     3 : 1/2
  1 2   : 1/2
  1   3 : 1/2
0 1 2   : -1/2
0 1   3 : -1/2
0   2 3 : -1/2
  1 2 3 : -1/2
0 1 2 3 : 1
lpr.get_lower([2, 0, 1, 1])=1
bel.get_lower([2, 0, 1, 1])=1/2

Quick check::

  lpr.get_lower([2,0,1,1]) >= lpr([1,0,1,0])+lpr([1,0,0,1])=1
  bel.get_lower([2,0,1,1]) = 0.5*(1+1+0+0+0+0-1+0+0)=0.5

However, it seems that the Mobius inverse of a 2-monotone lower
probability *can* be used to calculate its natural extension. The
following simulation seems to confirm this for a space of size 3 (all
coherent lower probabilities on such space are 2-monotone).

>>> import itertools
>>> import random
>>> from improb.lowprev.lowprob import LowProb
>>> from improb.lowprev.belfunc import BelFunc
>>> random.seed(10)
>>> n = 3
>>> gambles = [[random.randint(0,5) for i in range(n)] for j in range(20)]
>>> for i in range(20): # increase at will...
...     # construct a coherent lower probability
...     lpr = LowProb.make_random(pspace=n, division=10, number_type='fraction')
...     # construct belief function from lower probability
...     bel = BelFunc(lpr.pspace, mapping=lpr, number_type=lpr.number_type)
...     # check for incoherence
...     for gamble in gambles:
...         if lpr.number_cmp(lpr.get_lower(gamble), bel.get_lower(gamble)) != 0:
...             print('lpr (lower probability):')
...             print(lpr)
...             print('bel.mobius_inverse (basic belief assignment):')
...             print(bel.mobius_inverse)
...             print("lpr.get_lower({0})={1}".format(gamble, lpr.get_lower(gamble)))
...             print("bel.get_lower({0})={1}".format(gamble, bel.get_lower(gamble)))
...             break
...     else:
...         # no incoherence found! try another one
...         continue
...     break
... else:
...     raise RuntimeError("no counterexample found") # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
RuntimeError: no counterexample found
